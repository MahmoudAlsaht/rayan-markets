// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  phone            String   @unique
  username         String
  password         String
  role             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  verificationCode String?

  orders    Order[]
  profileId String?  @db.ObjectId
  profile   Profile?
}

model Profile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contacts  Contact[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model OrderProduct {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  price    Int
  imageUrl String
  quantity Int
  counter  Int    @default(0)
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String @db.ObjectId
}

model OrderContact {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  phone String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique @db.ObjectId
}

model Order {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  shippingFee       Int
  productTotalPrice Int
  orderId           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  status            String
  isUserRegistered  Boolean
  promoCodeId       String?  @db.ObjectId
  paymentMethod     String
  OrderTotalPrice   Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  anonymous   Anonymous? @relation(fields: [anonymousId], references: [id])
  anonymousId String?    @db.ObjectId

  products OrderProduct[]
  contact  OrderContact?
}

model Product {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  body              String
  price             Float
  newPrice          Float?
  quantity          Int
  isOffer           Boolean   @default(false)
  offerStartsAt     DateTime?
  offerEndsAt       DateTime?
  views             Int       @default(0)
  numberOfPurchases Int       @default(0)
  productType       String    @default("normal")
  description       String?

  weights Float[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  labelIds String[] @db.ObjectId
  labels   Label[]  @relation(fields: [labelIds], references: [id])

  imageId String? @unique @db.ObjectId
  image   Image?  @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  brand   Section? @relation(name: "brand", fields: [brandId], references: [id])
  brandId String?  @db.ObjectId

  category   Section? @relation(name: "category", fields: [categoryId], references: [id])
  categoryId String?  @db.ObjectId
}

model PromoCode {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  promoType String
  code      String
  discount  Int
  expired   Boolean
  startDate DateTime?
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Label {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  value String

  productIds String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  path      String
  imageType String
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product?

  section Section? @relation(name: "sectionCover")

  sectionId     String?  @db.ObjectId
  sectionBanner Section? @relation(name: "sectionBanner", fields: [sectionId], references: [id])

  bannerId String? @db.ObjectId
  banner   Banner? @relation(fields: [bannerId], references: [id], onDelete: Cascade)
}

model Section {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coverId String? @unique @db.ObjectId
  cover   Image?  @relation(name: "sectionCover", fields: [coverId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  sectionBanners Image[] @relation(name: "sectionBanner")

  categoryProducts Product[] @relation(name: "category")

  brandProducts Product[] @relation(name: "brand")
}

model District {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String @unique
  shippingFees Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  phone String

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  districtName         String
  districtShippingFees Float

  anonymous Anonymous?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  bannerType String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  images Image[]
}

model Anonymous {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  username         String
  phone            String
  verificationCode String?
  orders           Order[]
  contactId        String?  @unique @db.ObjectId
  contact          Contact? @relation(fields: [contactId], references: [id])
}
